name: helm_action

on:
  push:
    branches:
      - "*"  # run for all branches
    tags:
      - "*"  # run for all tags

jobs:
  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Authenticate with GCP
      - name: Set up GCP Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GD_GCP_GRIDU_DEVOPS_T1_T2 }}
          project_id: ${{ secrets.GCP_PROJECT }}

      # Set up Kubernetes CLI (kubectl)
      - name: Set up Kubernetes CLI (kubectl)
        uses: azure/setup-kubectl@v1

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v1

      # Load Kubernetes config from GCP
      - name: Load Kubernetes config
        run: |
          gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.GCP_PROJECT }}

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          #!/bin/bash
          
          cd /Terraform/

          # Function to handle failure based on specific error message
          handle_installation_error() {
              release_name=$1
              if [[ $? -ne 0 ]]; then
                  # Capture the error message
                  error_message=$(helm install $release_name 2>&1)

                  # Check if the error message is about re-using a name
                  if echo $error_message | grep -q "cannot re-use a name that is still in use"; then
                      echo "Warning: $release_name is already installed or in use. Continuing..."
                  else
                      echo "Error: Installation of $release_name failed. Exiting script."
                      exit 1
                  fi
              fi
          }

          # Apply sock-shop
          kubectl apply -f sock-shop.yaml

          # Create namespaces
          kubectl create namespace loki || true
          kubectl create namespace tempo || true
          kubectl create namespace prometheus || true
          kubectl create namespace otel || true

          # Install prometheus
          echo "Installing prometheus..."
          helm install prometheus prometheus-community/prometheus --namespace prometheus || handle_installation_error "prometheus"

          # Install tempo
          echo "Installing tempo..."
          helm -n tempo install tempo grafana/tempo-distributed -f tempo_values.yaml || handle_installation_error "tempo"

          # Install loki
          echo "Installing loki..."
          helm upgrade --install --namespace loki logging grafana/loki -f loki_values.yaml --set loki.auth_enabled=false || handle_installation_error "loki"

          # Install Grafana
          echo "Installing Grafana..."
          helm upgrade --install --namespace=loki loki-grafana grafana/grafana || handle_installation_error "grafana"

          # Install otel
          echo "Installing otel..."
          helm install otel-collector open-telemetry/opentelemetry-collector --namespace otel -f otel_values.yaml || handle_installation_error "otel"

          echo "All installations completed successfully."