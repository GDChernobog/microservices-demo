name: Helm Action NP

on:
  workflow_run:
    workflows: ["GKE Cluster Creation NP"]
    types:
      - completed
    branches:
      - "*"  # run for all branches
    tags:
      - "*"  # run for all tags

jobs:
  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Authenticate with GCP
      - name: Set up GCP Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GD_GCP_GRIDU_DEVOPS_T1_T2 }}
          project_id: ${{ secrets.GCP_PROJECT }}

      # Install gke-gcloud-auth-plugin
      - name: Install gke-gcloud-auth-plugin
        run: gcloud components install gke-gcloud-auth-plugin

      # Configure kubectl with GKE credentialss
      - name: Configure kubectl with GKE credentials
        run: gcloud container clusters get-credentials ${{ secrets.CLUSTER_NAME_NP }} --zone ${{ secrets.CLUSTER_ZONE }} --project ${{ secrets.GCP_PROJECT }}

      # Set up Kubernetes CLI (kubectl)
      - name: Set up Kubernetes CLI (kubectl)
        uses: azure/setup-kubectl@v1

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: '3.13.0'

      # Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          #!/bin/bash

          cd Terraform/NP

          # Function to check if Helm release exists
          check_helm_release() {
              release_name=$1
              namespace=$2
              helm list --namespace $namespace | grep -q $release_name
              return $?
          }

          # Apply sock-shop
          kubectl apply -f sock-shop.yaml

          # Create namespaces
          kubectl create namespace loki || true
          kubectl create namespace tempo || true
          kubectl create namespace prometheus || true
          kubectl create namespace otel || true

          # Add helm repos
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          helm repo update

          # Install prometheus
          if ! check_helm_release prometheus prometheus; then
              echo "Installing prometheus..."
              helm upgrade --install prometheus prometheus-community/prometheus --namespace prometheus
          else
              echo "Prometheus already installed, skipping..."
          fi

          # Install tempo
          if ! check_helm_release tempo tempo; then
              echo "Installing tempo..."
              helm -n tempo upgrade --install tempo grafana/tempo-distributed -f tempo_values.yaml
          else
              echo "Tempo already installed, skipping..."
          fi

          # Install loki
          if ! check_helm_release logging loki; then
              echo "Installing loki..."
              helm upgrade --install --namespace loki logging grafana/loki -f loki_values.yaml --set loki.auth_enabled=false
          else
              echo "Loki already installed, skipping..."
          fi

          # Install Grafana
#          if ! check_helm_release loki-grafana loki; then
              echo "Installing Grafana..."
              helm upgrade --install --namespace=loki loki-grafana grafana/grafana --set service.type=LoadBalancer 
#          else
#              echo "Grafana already installed, skipping..."
#          fi

          # Install otel
          if ! check_helm_release otel-collector otel; then
              echo "Installing otel..."
              helm upgrade --install otel-collector open-telemetry/opentelemetry-collector --namespace otel -f otel_values.yaml
          else
              echo "Otel already installed, skipping..."
          fi

          echo "All installations completed successfully."
          
              # Retrieve Grafana admin password from Kubernetes secret

      - name: Get Grafana Admin Password
        run: kubectl get secret --namespace loki loki-grafana -o jsonpath='{.data.admin-password}' | base64 --decode; echo


